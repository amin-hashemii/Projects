# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import random

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(416, 314)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_generate = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_generate.setGeometry(QtCore.QRect(150, 50, 75, 23))
        self.pushButton_generate.setObjectName("pushButton_generate")
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setWeight(50)
        self.pushButton_clear = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_clear.setGeometry(QtCore.QRect(240, 50, 75, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_clear.setFont(font)
        self.pushButton_clear.setObjectName("pushButton_clear")
        self.pushButton_clear2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_clear2.setGeometry(QtCore.QRect(175, 190, 75, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_clear2.setFont(font)
        self.pushButton_clear2.setObjectName("pushButton_clear2")
        self.pushButton_generate.setFont(font)
        self.pushButton_copy = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_copy.setGeometry(QtCore.QRect(100, 190, 75, 23))
        self.pushButton_copy.setObjectName("pushButton_copy")
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_copy.setFont(font)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(10, 140, 391, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.lineEdit.setFont(font)
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_number = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_number.setGeometry(QtCore.QRect(160, 20, 191, 21))
        self.lineEdit_number.setObjectName("lineEdit_number")
        self.lineEdit_number.setText('length of password you want')
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(0, 10, 141, 121))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.checkBox_digits = QtWidgets.QCheckBox(self.widget)
        self.checkBox_digits.setObjectName("checkBox_digits")
        font = QtGui.QFont()
        font.setPointSize(10)
        self.checkBox_digits.setFont(font)
        self.verticalLayout.addWidget(self.checkBox_digits)
        self.checkBox_capital = QtWidgets.QCheckBox(self.widget)
        self.checkBox_capital.setObjectName("checkBox_capital")
        font = QtGui.QFont()
        font.setPointSize(10)
        self.checkBox_capital.setFont(font)
        self.verticalLayout.addWidget(self.checkBox_capital)
        self.checkBox_small = QtWidgets.QCheckBox(self.widget)
        self.checkBox_small.setObjectName("checkBox_small")
        font = QtGui.QFont()
        font.setPointSize(10)
        self.checkBox_small.setFont(font)
        self.verticalLayout.addWidget(self.checkBox_small)
        self.checkBox_symbol = QtWidgets.QCheckBox(self.widget)
        self.checkBox_symbol.setObjectName("checkBox_symbol")
        font = QtGui.QFont()
        font.setPointSize(10)
        self.checkBox_symbol.setFont(font)
        self.verticalLayout.addWidget(self.checkBox_symbol)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 416, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.digits = False
        self.capital = False
        self.small = False
        self.symbols = False


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.checkBox_digits.stateChanged.connect(self.digit_checked)
        self.checkBox_symbol.stateChanged.connect(self.symbols_checked)
        self.checkBox_capital.stateChanged.connect(self.capital_checked)
        self.checkBox_small.stateChanged.connect(self.small_checked)
        

        self.pushButton_clear.clicked.connect(self.handle_clear_num)
        self.pushButton_clear2.clicked.connect(self.handle_clear_gen)
        self.pushButton_generate.clicked.connect(self.handle_generate)
        self.pushButton_copy.clicked.connect(self.handle_copy)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Random Password Generator"))
        self.lineEdit.setText(_translate("MainWindow", "Click Generate"))
        self.pushButton_generate.setText(_translate("MainWindow", "Generate"))
        self.pushButton_copy.setText(_translate("MainWindow", "Copy"))
        self.pushButton_clear.setText(_translate('MainWindow', "Clear"))
        self.pushButton_clear2.setText(_translate("MainWindow", "Clear"))
        self.checkBox_digits.setText(_translate("MainWindow", "Digits"))
        self.checkBox_capital.setText(_translate("MainWindow", "Capital letters "))
        self.checkBox_small.setText(_translate("MainWindow", "Small letters"))
        self.checkBox_symbol.setText(_translate("MainWindow", "Symbols"))

    def handle_generate(self):
        small = 'abcdefghijklmnopqrxtuvwxyz'
        capital = small.upper()
        digits = '1234567890'
        symbols = '!@#$%&!@#$%&'
        pass_gen = ''
        password = ''
        
        if self.symbols:
            pass_gen += symbols
        if self.capital:
            pass_gen += capital
        if self.small:
            pass_gen += small
        if self.digits:
            pass_gen += digits
        try:
            if self.lineEdit_number.text() != 'length of password you want':
                for i in range(0, int(self.lineEdit_number.text())):
                    if self.digits or self.capital or self.small or self.symbols:
                        password += random.choice(pass_gen)
                    else:
                        self.lineEdit.setText('You have to at least check one checkBoxes')
        except ValueError:
            self.lineEdit_number.setText('You have to put a number for length')

        if len(password) > 1:
            self.lineEdit.setText(password)

        elif self.lineEdit_number.text() == 'length of password you want':
            self.lineEdit.setText('You have to put a number for length')
        
    def handle_copy(self):
        self.lineEdit.selectAll()
        self.lineEdit.copy()


    def handle_clear_num(self):
        self.lineEdit_number.setText('')

    def handle_clear_gen(self):
        self.lineEdit.setText('')


    def digit_checked(self, state):
        if state == QtCore.Qt.Checked:
            self.digits = True
        else:
            self.digits = False
    def capital_checked(self, state):
        if state == QtCore.Qt.Checked:
            self.capital = True
        else:
            self.capital = False
    def small_checked(self, state):
        if state == QtCore.Qt.Checked:
            self.small = True
        else:
            self.small = False
    def symbols_checked(self, state):
        if state == QtCore.Qt.Checked:
            self.symbols = True
        else:
            self.symbols = False


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
