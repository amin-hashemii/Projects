# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
import requests
import webbrowser
import json
import threading
from plyer import notification
import os

class Ui_NasaAPI(object):
    def setupUi(self, NasaAPI):
        NasaAPI.setObjectName("NasaAPI")
        NasaAPI.resize(420, 300)
        self.centralwidget = QtWidgets.QWidget(NasaAPI)
        self.centralwidget.setObjectName("centralwidget")
        self.radioButton_true = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_true.setGeometry(QtCore.QRect(30, 30, 82, 17))
        self.radioButton_true.setObjectName("radioButton_true")
        self.radioButton_false = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_false.setGeometry(QtCore.QRect(30, 60, 82, 17))
        self.radioButton_false.setObjectName("radioButton_false")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 10, 47, 13))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(120, 20, 141, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_image = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_image.setGeometry(QtCore.QRect(40, 130, 90, 23))
        self.pushButton_image.setObjectName("pushButton_image")
        self.pushButton_dnimage = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_dnimage.setGeometry(QtCore.QRect(40, 160, 90, 23))
        self.pushButton_dnimage.setObjectName("pushButton_dnimage")
        self.pushButton_getimage = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_getimage.setObjectName('pushButton_getimage')
        self.pushButton_getimage.setGeometry(QtCore.QRect(40, 100, 90, 23))
        self.pushButton_clear = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_clear.setObjectName('pushButton_clear')
        self.pushButton_clear.setGeometry(QtCore.QRect(280, 20, 75, 23))
        self.pushButton_picture_of_the_day = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_picture_of_the_day.setGeometry(QtCore.QRect(150, 100, 145, 23))
        self.pushButton_picture_of_the_day.setObjectName('pushButton_picture_of_the_day')
        self.pushButton_picture_of_the_day_download = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_picture_of_the_day_download.setGeometry(QtCore.QRect(150, 160, 145, 23))
        self.pushButton_picture_of_the_day_download.setObjectName('pushButton_picture_of_the_day_download')
        self.pushButton_picture_of_the_day_open = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_picture_of_the_day_open.setGeometry(QtCore.QRect(150, 130, 145, 23))
        self.label_status = QtWidgets.QLabel(self.centralwidget)
        self.label_status.setGeometry(QtCore.QRect(40, 200, 350, 61))
        self.label_status.setObjectName('label_status')
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label_status.setFont(font)
        self.label_status.setAlignment(QtCore.Qt.AlignCenter)
        self.label_status.setText('Status')
        NasaAPI.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(NasaAPI)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 393, 21))
        self.menubar.setObjectName("menubar")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName('menuHelp')
        self.actionExit = QtWidgets.QAction(NasaAPI)
        self.actionExit.setObjectName('actionExit')
        self.menuHelp.addAction(self.actionExit)
        self.menubar.addAction(self.menuHelp.menuAction())
        NasaAPI.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(NasaAPI)
        self.statusbar.setObjectName("statusbar")
        NasaAPI.setStatusBar(self.statusbar)

        self.url = 'https://api.nasa.gov/planetary/apod?'
        self.is_entered_date = False
        self.hd = False
        self.is_got_image = False
        self.date = ''
        self.params = {}
        self.made_params = False
        self.json_data = None
        self.image_url = ''
        self.is_down_thread_started = False
        self.is_get_today_thread_started = False
        self.day_image_url = ''
        self.triggred = False
        self.is_got_today_image = False
        self.is_down_today_thread_started = False


        self.retranslateUi(NasaAPI)
        QtCore.QMetaObject.connectSlotsByName(NasaAPI)
        self.pushButton_getimage.clicked.connect(self.get_image)
        self.pushButton_image.clicked.connect(self.open_image)
        self.radioButton_true.toggled.connect(self.selected_true_radiobutton)
        self.radioButton_false.toggled.connect(self.selected_false_radiobutton)
        self.pushButton_clear.clicked.connect(self.clear)
        self.pushButton_dnimage.clicked.connect(self.down_image)
        self.pushButton_picture_of_the_day.clicked.connect(self.get_picture_of_day)
        self.pushButton_picture_of_the_day_download.clicked.connect(self.down_pic_of_the_day)
        self.pushButton_picture_of_the_day_open.clicked.connect(self.open_pic_of_the_day)
        self.actionExit.triggered.connect(self.exit)

    def retranslateUi(self, NasaAPI):
        _translate = QtCore.QCoreApplication.translate
        NasaAPI.setWindowTitle(_translate("NasaAPI", "NASA_API"))
        try:
            NasaAPI.setWindowIcon(QtGui.QIcon(r'icon.ico'))
        except:
            pass
        self.radioButton_true.setText(_translate("NasaAPI", "True"))
        self.radioButton_false.setText(_translate("NasaAPI", "False"))
        self.label.setText(_translate("NasaAPI", "HD"))
        self.lineEdit.setText(_translate("NasaAPI", "Date. Example:2020-12-25"))
        self.pushButton_image.setText(_translate("NasaAPI", "Open Image"))
        self.pushButton_dnimage.setText(_translate("NasaAPI", "Download Image"))
        self.pushButton_getimage.setText(_translate('NasaAPI', 'Get Image'))
        self.pushButton_clear.setText(_translate('NasaAPI', 'Clear'))
        self.pushButton_picture_of_the_day.setText(_translate('NasaAPI', 'Get Image of the day'))
        self.actionExit.setText(_translate('NasaAPI', 'Exit'))
        self.menuHelp.setTitle(_translate('NasaAPI', 'Help'))
        self.actionExit.setShortcut(_translate('NasaAPI', 'Esc'))
        self.pushButton_picture_of_the_day_open.setText(_translate('NasaAPI', 'Open Image of the day'))
        self.pushButton_picture_of_the_day_download.setText(_translate('NasaAPI', 'Download Picture of the Day'))

    def get_image(self):
        self.check_for_date()
        if self.is_entered_date:
            self.make_params()
            if self.triggred:
                if self.hd:
                    try:
                        response = requests.get(self.url, params=self.params)
                        json_data = json.loads(response.text)
                        self.json_data = json_data
                        self.image_url = json_data['hdurl']
                        self.is_got_image = True
                        self.label_status.setText('HD Image Got')
                        # notification.notify(title='HD Image Got', app_name='NASA APOD API', app_icon='icon.ico', message=f'HD Image from {self.date} Got seccusfully')
                    except:
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle('Connection Error')
                        msg.setText('Please Check Your Connection')
                        self.is_got_image = False
                        self.label_status.setText('Connection Error')
                        # notification.notify(title='CONNECTION ERROR', app_name='NASA APOD API', app_icon=r'icon.ico', message='Please Check Your Connection')
                        x = msg.exec_()
                elif not self.hd:
                    try:
                        response = requests.get(self.url, params=self.params)
                        json_data = json.loads(response.text)
                        self.json_data = json_data
                        self.image_url = json_data['url']
                        self.is_got_image = True
                        self.label_status.setText('non HD Image Got')
                        # notification.notify(title='non HD Image Got', app_name='NASA APOD API', app_icon='icon.ico', message=f'non HD Image from {self.date} Got seccusfully')
                    except:
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle('Connection Error')
                        msg.setText('Please Check Your Connection')
                        self.is_got_image = False
                        self.label_status.setText('Connection Error')
                        # notification.notify(title='CONNECTION ERROR', app_name='NASA APOD API', app_icon=r'icon.ico', message='Please Check Your Connection')
                        x = msg.exec_()
            else:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle('Error')
                msg.setText('Please Select HD True of False')
                self.is_got_image = False
                self.label_status.setText('Error')
                x = msg.exec_()

    def open_image(self):
        if self.is_got_image:
            webbrowser.open(self.image_url)
            self.label_status.setText('Image opened')
        else:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('File Error')
            msg.setText('You Have to get the image first')
            self.is_got_image = False
            # notification.notify(title='File ERROR', app_name='NASA APOD API', app_icon=r'icon.ico', message='You Have to get the image first')
            self.label_status.setText('File Error')
            x = msg.exec_()

    def down_image(self):
        if not self.is_down_thread_started:
            self.label_status.setText('Downloading Image...')
            # notification.notify(title='Download Started', app_name='NASA APOD API', app_icon='icon.ico', message='Downloading Image...', timeout=7)
            self.is_down_thread_started = True
            threded = threading.Thread(target=self.threaded_down_image)
            threded.start()

    def threaded_down_image(self):
        response = requests.get(self.image_url, allow_redirects=True)
        file_name = response.url[self.image_url.rfind('/')+1:]
        open(os.path.join('pics', file_name), 'wb').write(response.content)
        self.is_down_thread_started = False
        self.label_status.setText('Download Image Completed.')
        # notification.notify(title='Download Complete', app_name='NASA APOD API', app_icon='icon.ico', message='Download Image Completed.', timeout=3)

    def clear(self):
        self.lineEdit.setText('')
    
    def check_for_date(self):
        text = self.lineEdit.text()
        if len(text) == 10:
            self.date = text
            self.is_entered_date = True
        else:
            msg = QtWidgets.QMessageBox()
            msg.setText("please enter a valid date in valid format. example: '2020-12-25'")
            msg.setWindowTitle('Error')
            self.is_entered_date = False
            # notification.notify(title='DATE ERROR', app_name='NASA APOD API', app_icon='icon.ico', message="please enter a valid date in valid format. example: '2020-12-25'", timeout=6)
            self.label_status.setText('Invalid format for date')
            x = msg.exec_()
            
    def make_params(self):
        self.params = {
            'date': self.date,
            'hd': self.hd,
            'api_key': 'DEMO_KEY',
        }
        self.made_params = True

    def selected_true_radiobutton(self, selected):
        if selected:
            self.hd = True
            self.triggred = True
        else:
            self.hd = False

    def selected_false_radiobutton(self, selected):
        if selected:
            self.hd = False
            self.triggred = True
        else:
            self.hd = True

    def get_picture_of_day(self):
        if not self.is_get_today_thread_started:
            thread = threading.Thread(target=self.threaded_picture_of_the_day)
            thread.start()
            self.is_get_today_thread_started = True

    def threaded_picture_of_the_day(self):
        try:
            response = requests.get(self.url)
            json_data = json.loads(response.text)
            if self.triggred:
                if self.hd:
                    self.day_image_url = json_data['hdurl']
                    self.is_get_today_thread_started = False
                    self.is_got_today_image = True
                    self.label_status.setText('Image Got')
                elif not self.hd:
                    self.day_image_url = json_data['url']
                    self.is_get_today_thread_started = False
                    self.is_got_today_image = True
                    self.label_status.setText('Image Got')
            else:
                self.is_got_today_image = False
                self.label_status.setText('Error')
                self.is_get_today_thread_started = False

        except:
            self.is_got_today_image = False
            self.label_status.setText('Connection Error')
            # notification.notify(title='CONNECTION ERROR', app_name='NASA APOD API', app_icon=r'icon.ico', message='Please Check Your Connection')

    def down_pic_of_the_day(self):
        if not self.is_down_today_thread_started:
            thread = threading.Thread(target=self.threaded_down_pic_of_the_day)
            self.label_status.setText('Downloading...')
            # notification.notify(title='Download Started.', app_icon='icon.ico', app_name='NASA APOD API', message='Download Image of today Started. ')
            thread.start()
            self.is_down_today_thread_started = True

    def threaded_down_pic_of_the_day(self):
        try:
            res = requests.get(self.day_image_url, allow_redirects=True)
            file_name = res.url[self.day_image_url.rfind('/')+1:]
            open(os.path.join('pics', file_name), 'wb').write(res)
            self.is_down_today_thread_started = False
            self.label_status.setText('Download Image Completed.')
            # notification.notify(title='Download Complete', app_name='NASA APOD API', app_icon='icon.ico', message='Download Image Completed.', timeout=3)
        except:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('Connection Error')
            msg.setText('Please Check Your Connection')
            self.is_got_image = False
            self.label_status.setText('Connection Error')
            # notification.notify(title='CONNECTION ERROR', app_name='NASA APOD API', app_icon=r'icon.ico', message='Please Check Your Connection')
            x = msg.exec_()

    def open_pic_of_the_day(self):
        if self.is_got_today_image:
            webbrowser.open(self.day_image_url)
            self.label_status.setText('Image Opened')
        else:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('File Error')
            msg.setText('You Have to get the image first')
            self.is_got_image = False
            # notification.notify(title='File ERROR', app_name='NASA APOD API', app_icon=r'icon.ico', message='You Have to get the image first')
            self.label_status.setText('File Error')
            x = msg.exec_()
    
    def exit(self):
        quit()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    NasaAPI = QtWidgets.QMainWindow()
    ui = Ui_NasaAPI()
    ui.setupUi(NasaAPI)
    NasaAPI.show()
    sys.exit(app.exec_())
