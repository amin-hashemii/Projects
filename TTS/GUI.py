# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from gtts import gTTS
import gtts
from plyer import notification
import os
import time
import playsound
import shutil
import threading

class Ui_MainWindow(QtWidgets.QDialog):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(563, 258)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(100, 40, 371, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_paste = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_paste.setGeometry(QtCore.QRect(100, 80, 371, 23))
        self.pushButton_paste.setObjectName('pushButton_paste')
        self.pushButton_create = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_create.setGeometry(QtCore.QRect(100, 110, 371, 23))
        self.pushButton_create.setObjectName("pushButton_create")
        self.pushButton_play = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_play.setGeometry(QtCore.QRect(100, 140, 371, 23))
        self.pushButton_play.setObjectName("pushButton_play")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 563, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionSaveas = QtWidgets.QAction(MainWindow)
        self.actionSaveas.setObjectName('actionSaveas')
        self.actionInfo = QtWidgets.QAction(MainWindow)
        self.actionInfo.setObjectName("actionInfo")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSaveas)
        self.menuFile.addAction(self.actionNew)
        self.menuHelp.addAction(self.actionInfo)
        self.menuHelp.addAction(self.actionExit)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        font = QtGui.QFont()
        font.setPointSize(15)
        self.lineEdit.setFont(font)
        self.is_saved = False
        self.is_created = False
        self.file_name = ''
        self.homepath = 'tts.mp3'

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton_paste.clicked.connect(self.paste)
        self.pushButton_create.clicked.connect(self.create)
        self.pushButton_play.clicked.connect(self.play)
        self.actionNew.triggered.connect(self.new)
        self.actionSave.triggered.connect(self.save)
        self.actionExit.triggered.connect(self.exit)
        self.actionInfo.triggered.connect(self.info)
        self.actionSaveas.triggered.connect(self.save_as)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "TTS"))
        os.rename('icon.db', 'icon.png')
        MainWindow.setWindowIcon(QtGui.QIcon('icon.png'))
        os.rename('icon.png', 'icon.db')
        self.pushButton_create.setText(_translate("MainWindow", "Create"))
        self.pushButton_paste.setText(_translate('MainWindow', 'Paste'))
        self.pushButton_play.setText(_translate("MainWindow", "Play"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionSave.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionSaveas.setText(_translate('MainWindow', 'Save as'))
        self.actionSaveas.setShortcut(_translate('MainWindow', "Ctrl+Shift+S"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionNew.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionInfo.setText(_translate("MainWindow", "Info"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setShortcut(_translate("MainWindow", "Esc"))

    def create(self):
        text = self.lineEdit.text()
        if text == '':
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('Error')
            msg.setText('enter something first :)')
            x = msg.exec_()
        else:
            t1 = threading.Thread(target=self.threaded_notif)
            t1.start()
            # t1.join()
            

    def play(self):
        if self.is_created:
            home = 'data.db'
            shutil.copy(home, 'tts.mp3')
            playsound.playsound('tts.mp3')
            os.remove('tts.mp3')
        else:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('Error')
            msg.setText('You have to create a file first')
            x = msg.exec_()
    
    def save(self):
        try:
            if not self.is_saved :
                self.file_name, _ = QtWidgets.QFileDialog.getSaveFileName(self, 'Save as', r'C:\\')
                self.is_saved = True
                os.rename('data.db', 'tts.mp3')
                shutil.copy(self.homepath, self.file_name)
                os.rename('tts.mp3', 'data.db')
            else:
                os.rename('data.db', 'tts.mp3')
                shutil.copy(self.homepath, self.file_name)
                os.rename('tts.mp3', 'data.db')
        except FileNotFoundError:
            try:
                os.rename('tts.mp3', 'data.db')
            except:
                pass
            self.is_saved = False
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('File Error')
            msg.setText('cannot open the file')
            x = msg.exec_()
           
    
    def threaded_notif(self):
        text = self.lineEdit.text()
        try:
            tts = gTTS(text=text, lang='en')
            tts.save('data.db')
            # os.rename('data.mp3', 'data.db')
            msg = 'Your file is ready, try to save it'
            title = 'File is ready'
            notification.notify(title=title, message=msg, timeout=10, toast=False)
            self.is_created = True
        except gtts.tts.gTTSError:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('Connection Error')
            msg.setText('Please Check your netwoek connection')
            x = msg.exec_()

    def save_as(self):
        try:
            self.file_name, _ = QtWidgets.QFileDialog.getSaveFileName(self, 'Save as', r'C:\\')
            self.is_saved = True
            os.rename('data.db', 'tts.mp3')
            shutil.copy(self.homepath, self.file_name)
            os.rename('tts.mp3', 'data.db')
        except FileNotFoundError:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('File Error')
            msg.setText('cannot open the file')
            x = msg.exec_()

    def new(self):
        self.is_saved = False
        self.is_created = False
        self.lineEdit.setText('')
        try:
            os.remove('data.db')
        except:
            pass
    def paste(self):
        self.lineEdit.paste()

    def info(self):
        dialog = QtWidgets.QDialog()
        dialog.resize(700, 200)
        dialog.setWindowTitle('Info')
        label = QtWidgets.QLabel(dialog)
        label.setText('''   TTS(Text To Speech)''')
        label_2 = QtWidgets.QLabel(dialog)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        label.setFont(font)
        label_2.move(30, 20)
        label_2.setText('''
type your text in line edit and click create
for listening to the created file click play
for saving the file click save in file menu or click 'Ctrl+S' 

        By Zeos''')
        font_2 = QtGui.QFont()
        font_2.setPointSize(18)
        label_2.setFont(font_2)
        dialog.exec_()

    
    def exit(self):
        quit()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
